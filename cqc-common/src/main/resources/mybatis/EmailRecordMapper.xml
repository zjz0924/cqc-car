<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="cn.wow.common.dao.EmailRecordDao">
	<resultMap id="BaseResultMap" type="cn.wow.common.domain.EmailRecord">
		<id column="id" property="id" jdbcType="BIGINT" />
		<result column="subject" property="subject" jdbcType="VARCHAR" />
		<result column="content" property="content" jdbcType="VARCHAR" />
		<result column="addr" property="addr" jdbcType="VARCHAR" />
		<result column="task_id" property="taskId" jdbcType="BIGINT" />
		<result column="a_id" property="aId" jdbcType="BIGINT" />
		<result column="state" property="state" jdbcType="INTEGER" />
		<result column="type" property="type" jdbcType="INTEGER" />
		<result column="orgin_email" property="orginEmail" jdbcType="VARCHAR" />
		<result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
	</resultMap>
	
	<sql id="base_columns">
		id, subject, content, addr, task_id, a_id, state, type, orgin_email, create_time
	</sql>
	
	<select id="selectOne" resultMap="BaseResultMap" parameterType="java.lang.Long">
		select <include refid="base_columns" /> from email_record where id = #{id,jdbcType=BIGINT}
	</select>
	
	<delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
		delete from email_record
		where id = #{id,jdbcType=BIGINT}
	</delete>
	
	<insert id="insert" parameterType="cn.wow.common.domain.EmailRecord">
		insert into email_record (subject, content, addr, task_id, a_id, state, type, orgin_email, create_time)
			values (#{subject,jdbcType=VARCHAR}, #{content,jdbcType=VARCHAR}, #{addr,jdbcType=VARCHAR}, #{taskId,jdbcType=BIGINT}, #{aId,jdbcType=BIGINT},
					#{state,jdbcType=INTEGER}, #{type,jdbcType=INTEGER}, #{orginEmail,jdbcType=VARCHAR}, #{createTime,jdbcType=TIMESTAMP})
	</insert>
	
	
	<update id="update" parameterType="cn.wow.common.domain.EmailRecord">
		update email_record
		<set>
			<if test="subject != null">
				subject = #{subject,jdbcType=VARCHAR},
			</if>
			<if test="content != null">
				content = #{content,jdbcType=VARCHAR},
			</if>
			<if test="addr != null">
				addr = #{addr,jdbcType=VARCHAR},
			</if>
			<if test="taskId != null">
				task_id = #{taskId,jdbcType=BIGINT},
			</if>
			<if test="aId != null">
				a_id = #{aId,jdbcType=BIGINT},
			</if>
			<if test="state != null">
				state = #{state,jdbcType=INTEGER},
			</if>
			<if test="type != null">
				type = #{type,jdbcType=INTEGER},
			</if>
			<if test="orginEmail != null">
				orgin_email = #{orginEmail,jdbcType=VARCHAR},
			</if>
			<if test="createTime != null">
				create_time = #{createTime,jdbcType=TIMESTAMP},
			</if>
		</set>
		where id = #{id,jdbcType=BIGINT}
	</update>
	
	<select id="selectAllList" resultMap="BaseResultMap" parameterType="java.util.Map" >
	  	select 
	    <include refid="base_columns" />
	      from email_record
	     <where>
			<if test="subject != null">
				and subject like concat('%',#{subject,jdbcType=VARCHAR},'%')
			</if>
			<if test="taskId != null">
				and task_id = #{taskId,jdbcType=BIGINT}
			</if>
			<if test="aId != null">
				and a_id = #{aId,jdbcType=BIGINT}
			</if>
			<if test="state != null">
				and state = #{state,jdbcType=INTEGER}
			</if>
			<if test="type != null">
				and type = #{type,jdbcType=INTEGER}
			</if>
			<if test="orginEmail != null">
				and orgin_email like concat('%',#{orginEmail,jdbcType=VARCHAR},'%')
			</if>
			<if test="startCreateTime != null and startCreateTime != ''">
				and create_time &gt;= #{startCreateTime, jdbcType=TIMESTAMP}
			</if>
			<if test="endCreateTime != null and endCreateTime != ''">
				and create_time &lt;= #{endCreateTime, jdbcType=TIMESTAMP}
			</if>
	      </where>
	      
		  <choose>
	  		<when test="custom_order_sql != null">
	  			order by ${custom_order_sql}
	  		</when>
	  		<otherwise>
	  			order by id desc
	  		</otherwise>
	 	 </choose>
	  </select>
	
	
</mapper>